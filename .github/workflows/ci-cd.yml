name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run CI pipeline'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'
  DOCKER_REGISTRY: 'docker.io'
  IMAGE_NAME: 'store-app'

jobs:
  check-commit-message:
    name: Check CI Trigger Conditions
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check CI trigger conditions (PR, run-ci, or manual)
        id: check
        run: |
          # Always run for pull requests to main branch
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "✅ Pull request detected - CI will run"
          # Run for commits with 'run-ci' in message
          elif git log --format=%B -n 1 ${{ github.sha }} | grep -q "run-ci"; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "✅ Commit message contains 'run-ci' - CI will run"
          # Run for manual workflow dispatch
          elif [[ "${{ github.event.inputs.force_run }}" == "true" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "✅ Manual trigger - CI will run"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "❌ Commit message does not contain 'run-ci' and not a PR - CI will be skipped"
          fi

  test:
    name: Test and Code Coverage
    runs-on: ubuntu-latest
    needs: check-commit-message
    if: needs.check-commit-message.outputs.should-run == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for JaCoCo reports

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests with JaCoCo
        run: ./gradlew test jacocoTestReport --no-daemon

      - name: Upload JaCoCo reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload JaCoCo HTML report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html/
          retention-days: 30

      - name: Upload JaCoCo XML report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-xml-report
          path: build/reports/jacoco/test/jacocoTestReport.xml
          retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [check-commit-message, test]
    if: needs.check-commit-message.outputs.should-run == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build application
        run: ./gradlew build --no-daemon

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: build/libs/*.jar
          retention-days: 30

  api-test:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [check-commit-message, build]
    if: needs.check-commit-message.outputs.should-run == 'true'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: store
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: application-jar
          path: build/libs/

      - name: Start application
        run: |
          java -jar build/libs/*.jar &
          echo $! > app.pid
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/store
          SPRING_DATASOURCE_USERNAME: admin
          SPRING_DATASOURCE_PASSWORD: admin
          SPRING_DATA_REDIS_HOST: localhost
          SPRING_DATA_REDIS_PORT: 6379

      - name: Wait for application startup
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 2; done'

      - name: Run API tests
        run: |
          chmod +x scripts/test-api-ci.sh
          ./scripts/test-api-ci.sh
        env:
          BASE_URL: http://localhost:8080
          TIMEOUT: 30

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

      - name: Upload API test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: |
            /tmp/api_response.json
          retention-days: 7

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [check-commit-message, test, build, api-test]
    if: needs.check-commit-message.outputs.should-run == 'true'
    environment: assement_env

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images Built:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Registry:" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.DOCKER_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- JaCoCo reports generated and uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Code coverage available in Codecov" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [check-commit-message, docker]
    if: needs.check-commit-message.outputs.should-run == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'