openapi: 3.0.0
info:
  title: Store Application API
  version: '1.0'
  description: A Spring Boot store application for managing customers, products, and orders
  contact:
    name: Store Dev Team
    url: 'https://www.example.com'
    email: dev@example.com
  termsOfService: 'https://www.example.com'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.htm'
servers:
  - url: 'http://localhost:8080'
    description: Development server
paths:
  # Customer endpoints
  /customer/all:
    get:
      summary: Get all customers with pagination
      description: Retrieve a paginated list of all customers
      tags:
        - Customer
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
            example: 20
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            default: id
            example: id
        - name: sortOrder
          in: query
          description: Sort direction (asc/desc)
          required: false
          schema:
            type: string
            default: asc
            enum: [asc, desc]
            example: asc
      responses:
        '200':
          description: Successfully retrieved customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      operationId: getAllCustomersPaged

  /customer/search:
    get:
      summary: Search customers by name with pagination
      description: Search for customers whose name contains the specified query string with pagination support
      tags:
        - Customer
      parameters:
        - name: q
          in: query
          description: Search query string to match against customer names
          required: false
          schema:
            type: string
            example: john
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
            example: 20
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            default: id
            example: id
        - name: sortOrder
          in: query
          description: Sort direction (asc/desc)
          required: false
          schema:
            type: string
            default: asc
            enum: [asc, desc]
            example: asc
      responses:
        '200':
          description: Successfully retrieved matching customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        '400':
          description: Invalid search query
      operationId: searchCustomers

  /customer/{id}:
    get:
      summary: Get customer by ID
      description: Retrieve a specific customer by their ID
      tags:
        - Customer
      parameters:
        - name: id
          in: path
          description: Customer ID
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '404':
          description: Customer not found
        '400':
          description: Invalid customer ID
      operationId: getCustomerById

  /customer:
    post:
      summary: Create a new customer
      description: Create a new customer with the provided information
      tags:
        - Customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '400':
          description: Invalid customer data
      operationId: createCustomer

  # Product endpoints
  /products:
    get:
      summary: Get all products with pagination
      description: Retrieve a paginated list of all products with their associated order IDs
      tags:
        - Product
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
            example: 20
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            default: id
            example: id
        - name: sortOrder
          in: query
          description: Sort direction (asc/desc)
          required: false
          schema:
            type: string
            default: asc
            enum: [asc, desc]
            example: asc
      responses:
        '200':
          description: Successfully retrieved products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      operationId: getAllProductsPaged

    post:
      summary: Create a new product
      description: Create a new product with the provided information
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '400':
          description: Invalid product data
      operationId: createProduct

  /products/search:
    get:
      summary: Search products by description with pagination
      description: Search for products whose description contains the specified query string with pagination support
      tags:
        - Product
      parameters:
        - name: q
          in: query
          description: Search query string to match against product descriptions
          required: false
          schema:
            type: string
            example: laptop
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
            example: 20
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            default: id
            example: id
        - name: sortOrder
          in: query
          description: Sort direction (asc/desc)
          required: false
          schema:
            type: string
            default: asc
            enum: [asc, desc]
            example: asc
      responses:
        '200':
          description: Successfully retrieved matching products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        '400':
          description: Invalid search query
      operationId: searchProductsPaged

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID with associated order IDs
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Product not found
        '400':
          description: Invalid product ID
      operationId: getProductById

  # Order endpoints
  /order:
    get:
      summary: Get all orders with pagination
      description: Retrieve a paginated list of all orders
      tags:
        - Order
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
            example: 20
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            default: id
            example: id
        - name: sortOrder
          in: query
          description: Sort direction (asc/desc)
          required: false
          schema:
            type: string
            default: asc
            enum: [asc, desc]
            example: asc
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      operationId: getAllOrdersPaged

    post:
      summary: Create a new order
      description: Create a new order with the provided information
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '400':
          description: Invalid order data
      operationId: createOrder

  /order/{id}:
    get:
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Order not found
      operationId: getOrderById

components:
  schemas:
    # Pagination response
    PagedResponse:
      type: object
      properties:
        content:
          type: array
          items: {}
        page:
          type: integer
          description: Current page number (0-based)
        size:
          type: integer
          description: Page size
        totalElements:
          type: integer
          format: int64
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        first:
          type: boolean
          description: Whether this is the first page
        last:
          type: boolean
          description: Whether this is the last page
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrevious:
          type: boolean
          description: Whether there is a previous page
        sortBy:
          type: string
          description: Field used for sorting
        sortOrder:
          type: string
          description: Sort direction (asc/desc)

    # Customer schemas
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Customer name
      required:
        - name

    CustomerDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Customer name
        orderIds:
          type: array
          items:
            type: integer
            format: int64
          description: List of order IDs associated with this customer

    # Product schemas
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
          description: Product description
      required:
        - description

    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
          description: Product description
        orderIds:
          type: array
          items:
            type: integer
            format: int64
          description: List of order IDs associated with this product

    # Order schemas
    CreateOrderRequest:
      type: object
      properties:
        description:
          type: string
          description: Order description
        customerId:
          type: integer
          format: int64
          description: ID of the customer placing the order
        productIds:
          type: array
          items:
            type: integer
            format: int64
          description: List of product IDs to include in the order
      required:
        - customerId

    OrderDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
          description: Order description
        customer:
          $ref: '#/components/schemas/CustomerDTO'
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'
          description: List of products in this order

tags:
  - name: Customer
    description: Customer management operations
  - name: Product
    description: Product management operations
  - name: Order
    description: Order management operations